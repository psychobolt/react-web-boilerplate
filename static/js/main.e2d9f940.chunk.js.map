{"version":3,"sources":["App/Header/Header.i18n.js","App/Header/Header.component.js","App/TodoList/Filter/Filter.component.js","App/TodoList/Filter/Filter.i18n.js","App/TodoList/Form/Form.actions.js","App/TodoList/Form/Form.i18n.js","App/TodoList/Form/Form.component.js","App/TodoList/Form/Form.container.js","App/TodoList/TodoList.i18n.js","App/TodoList/Item/Item.actions.js","App/TodoList/Item/Item.container.js","App/TodoList/Item/Item.component.js","App/TodoList/TodoList.selectors.js","App/TodoList/TodoList.component.js","App/App.i18n.js","App/App.theme.js","App/App.component.js","routes.js","App/TodoList/TodoList.state.js","App/TodoList/TodoList.reducers.js","App/App.reducers.js","reducer.js","Framework/index.js","registerServiceWorker.js","index.js"],"names":["toggleLight","toggleDark","useColorMode","colorMode","toggleColorMode","isDarkMode","p","justifyContent","htmlFor","id","onChange","isChecked","Filters","Routes","ALL","pathname","state","filter","ACTIVE","COMPLETED","TabFilters","React","Object","entries","map","key","value","to","as","Link","getSelectedIndex","defaultMemoize","values","findIndex","route","activeFilter","index","idGen","Hashids","Actions","label_add_todo","useState","connect","undefined","dispatch","onSubmit","text","trim","type","payload","encode","Date","now","addTodo","setValue","pt","target","colorScheme","onClick","en","filterMessages","formMessages","completed","onToggle","toggleComplete","getVisibleTodos","createSelector","todos","_","todo","getPathnameFilter","find","filterRoute","location","useLocation","items","useSelector","headerMessages","todoListMessages","theme","language","navigator","i18n","messages","locale","basename","process","path","component","App","initialState","action","FormActions","ItemActions","todoListReducers","combineReducers","appReducers","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","isLocalhost","Boolean","window","hostname","match","composeEnhancers","composeWithDevTools","trace","store","createStore","reducer","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mSAAe,EACT,CACFA,YAAa,eACbC,WAAY,eAHD,EAKJ,CACPD,YAAa,qBACbC,WAAY,4B,mCCDD,aAAO,IAAD,EACoBC,yBAA/BC,EADW,EACXA,UAAWC,EADA,EACAA,gBACbC,EAJS,SAIIF,EACnB,OACE,kBAAC,IAAD,CAAMG,EAAE,MAAMC,eAAe,YAC3B,kBAAC,IAAD,CAAWC,QAAQ,cACjB,kBAAC,IAAD,CAAkBC,GAAIJ,EAAa,cAAgB,gBAErD,kBAAC,IAAD,CACEI,GAAG,aACHC,SAAUN,EACVO,UAAWN,M,wBCVNO,EACN,MADMA,EAEH,SAFGA,EAGA,YAGAC,EAAS,CACpBC,IAAK,CAAEC,SAAU,IAAKC,MAAO,CAAEC,OAAQL,IACvCM,OAAQ,CAAEH,SAAU,UAAWC,MAAO,CAAEC,OAAQL,IAChDO,UAAW,CAAEJ,SAAU,aAAcC,MAAO,CAAEC,OAAQL,KAGlDQ,EAAaC,QAAW,kBAC5B,gBAAC,IAAD,KACGC,OAAOC,QAAQV,GAAQW,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YAC1B,gBAAC,IAAD,CAAKD,IAAKA,EAAKE,GAAID,EAAOE,GAAIC,KAC5B,gBAAC,IAAD,CAAkBpB,GAAIgB,YAMxBK,EAAmBC,aAAe,SAAAd,GAAM,OAAIK,OAAOU,OAAOnB,GAC7DoB,WAAU,SAACC,GAAD,OAAgBA,EAAMlB,MAAMC,SAAWA,QAMrC,kBAAGkB,EAAH,EAAGA,aAAH,OACb,gBAAC,IAAD,CAAMC,MAAON,EAAiBK,IAAe,gBAACf,EAAD,QCrChC,EACT,CACFN,IAAK,MACLI,OAAQ,SACRC,UAAW,aAJA,EAMJ,CACPL,IAAK,SACLI,OAAQ,eACRC,UAAW,U,SCPTkB,EAAQ,I,OAAIC,GAAQ,gBAEbC,EACD,UCLG,EACT,CACFC,eAAgB,YAFL,EAIJ,CACPA,eAAgB,wC,kBCAZC,EAAapB,WCQNqB,mBAAQC,GARI,SAAAC,GAAQ,MAAK,CACtCC,SAAU,SAAAC,GACJA,EAAKC,QACPH,EHAiB,SAAAE,GAAI,MAAK,CAC9BE,KAAMT,EACNU,QAAS,CACPxC,GAAI4B,EAAMa,OAAOC,KAAKC,OACtBN,SGJWO,CAAQP,QAKRJ,EDDA,YAA0B,IAAvBG,EAAsB,EAAtBA,SAAsB,EACZJ,EAPP,IAMmB,mBAC/Bf,EAD+B,KACxB4B,EADwB,KAEtC,OACE,gBAAC,IAAD,CAAMC,GAAG,QACP,gBAAC,IAAD,CAAO7C,SAAU,gBAAG8C,EAAH,EAAGA,OAAH,OAAgBF,EAASE,EAAO9B,QAAQA,MAAOA,IAChE,gBAAC,IAAD,CACE+B,YAAY,OACZC,QAAS,WACPb,EAASnB,GACT4B,EAfW,MAkBb,gBAAC,IAAD,CAAkB7C,GAAG,wBErBd,GACbkD,GAAG,2BACEC,GACAC,GAEL,QAAQ,2BACHD,GACAC,I,kBCVMtB,EACM,iB,kBCQJG,mBAAQC,GAJI,SAACC,EAAD,OAAanC,EAAb,EAAaA,GAAIqD,EAAjB,EAAiBA,UAAjB,MAAkC,CAC3DC,SAAU,kBAAMnB,EDFY,SAACnC,EAAIqD,GAAL,MAAoB,CAChDd,KAAMT,EACNU,QAAS,CACPxC,KACAqD,cCFuBE,CAAevD,GAAKqD,QAGhCpB,ECCA,gBAAGI,EAAH,EAAGA,KAAMgB,EAAT,EAASA,UAAWC,EAApB,EAAoBA,SAApB,OACb,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAUrD,SAAUqD,EAAUpD,UAAWmD,GACvC,gBAAC,IAAD,CAAMlC,GAAIkC,EAAY,MAAQ,KAAMhB,QCP7BmB,EAAkBC,aAFd,SAAAlD,GAAK,OAAIM,OAAOU,OAAOhB,EAAMmD,UAI5C,SAACC,EAAGnD,GAAJ,OAAeA,KACf,SAACkD,EAAOlD,GACN,OAAQA,GACN,KAAKL,EACH,OAAOuD,EAAMlD,QAAO,SAAAoD,GAAI,OAAIA,EAAKP,aACnC,KAAKlD,EACH,OAAOuD,EAAMlD,QAAO,SAAAoD,GAAI,OAAKA,EAAKP,aACpC,QACE,OAAOK,MCLTG,EAAoBvC,aAAe,SAAAhB,GACvC,IAAMmB,EAAQZ,OAAOU,OAAOnB,GACzB0D,MAAK,SAAAC,GAAW,OAAIA,EAAYzD,WAAaA,KAChD,OAAOmB,EAAQA,EAAMlB,MAAMC,OAASL,KAGvB,aACb,IAAM6D,EAAWC,cACXvC,EAAesC,EAASzD,MAC1ByD,EAASzD,MAAMC,OACfqD,EAAkBG,EAAS1D,UACzB4D,EAAQC,aAAY,SAAA5D,GAAK,OAAIiD,EAAgBjD,EAAOmB,MAC1D,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQA,aAAcA,IACtB,kBAAC,IAAD,CAAMoB,GAAG,OACNoB,EAAMnD,KAAI,SAAA6C,GAAI,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAgB5C,IAAK4C,EAAK5D,YCzBtC,IACbkD,GAAG,2BACEkB,GACAC,EAAiBnB,IAEtB,QAAQ,2BACHkB,GACAC,EAAiB,W,UCRT,kBACVC,MCMGC,GAAaC,UAAbD,SACFE,GAAOC,GAASH,KAAaG,GAASxB,GAE7B,qBACb,kBAAC,IAAD,CAAcyB,OAAQJ,GAAUG,SAAUD,IACxC,kBAAC,iBAAD,CAAgBH,MAAOA,IACrB,kBAAC,IAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCZS,qBACb,kBAAC,IAAD,CAAQM,SAAUC,0BAChB,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWC,O,SCPxB,IACbtB,MAAO,IC8BM,IACbA,MA5B0B,WAAyC,IAAxCnD,EAAuC,uDAA/B0E,GAAavB,MAAOwB,EAAW,uCAClE,OAAQA,EAAO3C,MACb,KAAK4C,EAAuB,IAAD,EACJD,EAAO1C,QAApBxC,EADiB,EACjBA,GAAIqC,EADa,EACbA,KACZ,OAAO,2BACF9B,GADL,mBAEGP,EAAK,CACJA,KACAqC,OACAgB,WAAW,KAIjB,KAAK+B,EAA8B,IAAD,EACNF,EAAO1C,QAAzBxC,EADwB,EACxBA,GAAIqD,EADoB,EACpBA,UACZ,OAAO,2BACF9C,GADL,mBAEGP,EAFH,2BAGOO,EAAMP,IAHb,IAIIqD,gBAIN,QAAS,OAAO9C,KCzBL,kBACV8E,ICEUC,6BAAgB,2BAC1BC,ICN4B,KCUjC,SAASC,GAAgBC,GACvBjB,UAAUkB,cACPC,SAASF,GACTG,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxF,QACfiE,UAAUkB,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MA+BjE,IAAMC,GAAcC,QACW,cAA7BC,OAAOzC,SAAS0C,UAEkB,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAChBC,MAAM,2DC9Db,IAAMC,GAAmBC,8BAAoB,CAAEC,OAAO,IAChDC,GAAQC,sBACZC,GACAL,MASFM,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,IAAO,kBAAC,GAAD,OACxBK,SAASC,eAAe,SDmDX,WACb,GAA6C,kBAAmB7C,UAAW,CAGzE,GADkB,IAAI8C,IAAIzC,yBAAwB4B,OAAOzC,UAC3CuD,SAAWd,OAAOzC,SAASuD,OAIvC,OAGFd,OAAOe,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAMZ,yBAAN,sBAEP0B,KAlDV,SAAiCd,GAE/BgC,MAAMhC,GACHG,MAAK,SAAA8B,GAGkB,MAApBA,EAASC,SAC0D,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAGhDtD,UAAUkB,cAAcqC,MAAMnC,MAAK,SAAAC,GACjCA,EAAamC,aAAapC,MAAK,WAC7Ba,OAAOzC,SAASiE,eAKpBzC,GAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEA8BA8B,CAAwBzC,GAIxBjB,UAAUkB,cAAcqC,MAAMnC,MAAK,WACjCO,QAAQC,IAAI,gHAKdZ,GAAgBC,OC3ExB0C,K","file":"static/js/main.e2d9f940.chunk.js","sourcesContent":["export default {\n  en: {\n    toggleLight: 'Toggle Light',\n    toggleDark: 'Toggle Dark',\n  },\n  'zh-TW': {\n    toggleLight: '拨动灯',\n    toggleDark: '切换黑暗',\n  },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Flex, FormLabel, Switch, useColorMode } from '@chakra-ui/core';\n\nconst darkMode = 'dark';\n\nexport default () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const isDarkMode = colorMode === darkMode;\n  return (\n    <Flex p=\"5px\" justifyContent=\"flex-end\">\n      <FormLabel htmlFor=\"color-mode\">\n        <FormattedMessage id={isDarkMode ? 'toggleLight' : 'toggleDark'} />\n      </FormLabel>\n      <Switch\n        id=\"color-mode\"\n        onChange={toggleColorMode}\n        isChecked={isDarkMode}\n      />\n    </Flex>\n  );\n};\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { defaultMemoize } from 'reselect';\nimport { Tabs, TabList, Tab } from '@chakra-ui/core';\n\nexport const Filters = {\n  ALL: 'all',\n  ACTIVE: 'active',\n  COMPLETED: 'completed',\n};\n\nexport const Routes = {\n  ALL: { pathname: '/', state: { filter: Filters.ALL } },\n  ACTIVE: { pathname: '/active', state: { filter: Filters.ACTIVE } },\n  COMPLETED: { pathname: '/completed', state: { filter: Filters.COMPLETED } },\n};\n\nconst TabFilters = React.memo(() => (\n  <TabList>\n    {Object.entries(Routes).map(([key, value]) => (\n      <Tab key={key} to={value} as={Link}>\n        <FormattedMessage id={key} />\n      </Tab>\n    ))}\n  </TabList>\n));\n\nconst getSelectedIndex = defaultMemoize(filter => Object.values(Routes)\n  .findIndex((route: any) => route.state.filter === filter));\n\ntype Props = {\n  activeFilter: boolean\n};\n\nexport default ({ activeFilter }: Props) => (\n  <Tabs index={getSelectedIndex(activeFilter)}><TabFilters /></Tabs>\n);\n","export default {\n  en: {\n    ALL: 'All',\n    ACTIVE: 'Active',\n    COMPLETED: 'Completed',\n  },\n  'zh-TW': {\n    ALL: '都',\n    ACTIVE: '活性',\n    COMPLETED: '訖',\n  },\n};\n","import Hashids from 'hashids';\n\nconst idGen = new Hashids('form_actions');\n\nexport const Actions = {\n  ADD_TODO: 'addTodo',\n};\n\nexport const addTodo = text => ({\n  type: Actions.ADD_TODO,\n  payload: {\n    id: idGen.encode(Date.now()),\n    text,\n  },\n});\n","export default {\n  en: {\n    label_add_todo: 'Add Todo',\n  },\n  'zh-TW': {\n    label_add_todo: '添加待辦事項',\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Flex, Button, Input } from '@chakra-ui/core';\n\nconst { useState } = React;\nconst initialValue = '';\n\ntype Props = {\n  onSubmit: (value: string) => any\n};\n\nexport default ({ onSubmit }: Props) => {\n  const [value, setValue] = useState(initialValue);\n  return (\n    <Flex pt=\"15px\">\n      <Input onChange={({ target }) => setValue(target.value)} value={value} />\n      <Button\n        colorScheme=\"blue\"\n        onClick={() => {\n          onSubmit(value);\n          setValue(initialValue);\n        }}\n      >\n        <FormattedMessage id=\"label_add_todo\" />\n      </Button>\n    </Flex>\n  );\n};\n","import { connect } from 'react-redux';\n\nimport Form from './Form.component';\nimport { addTodo } from './Form.actions';\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => {\n    if (text.trim()) {\n      dispatch(addTodo(text));\n    }\n  },\n});\n\nexport default connect(undefined, mapDispatchToProps)(Form);\n","import { messages as filterMessages } from './Filter';\nimport { messages as formMessages } from './Form';\n\nexport default {\n  en: {\n    ...filterMessages.en,\n    ...formMessages.en,\n  },\n  'zh-TW': {\n    ...filterMessages['zh-TW'],\n    ...formMessages['zh-TW'],\n  },\n};\n","export const Actions = {\n  TOGGLE_COMPLETE: 'toggleComplete',\n};\n\nexport const toggleComplete = (id, completed) => ({\n  type: Actions.TOGGLE_COMPLETE,\n  payload: {\n    id,\n    completed,\n  },\n});\n","import { connect } from 'react-redux';\n\nimport Item from './Item.component';\nimport { toggleComplete } from './Item.actions';\n\nconst mapDispatchToProps = (dispatch, { id, completed }) => ({\n  onToggle: () => dispatch(toggleComplete(id, !completed)),\n});\n\nexport default connect(undefined, mapDispatchToProps)(Item);\n","// @flow\nimport * as React from 'react';\nimport { ListItem, Checkbox, Text } from '@chakra-ui/core';\n\ntype Props = {\n  text: string,\n  completed: boolean,\n  onToggle: (event: SyntheticMouseEvent<HTMLLabelElement>) => any,\n};\n\nexport default ({ text, completed, onToggle }: Props) => (\n  <ListItem>\n    <Checkbox onChange={onToggle} isChecked={completed}>\n      <Text as={completed ? 'del' : 'p'}>{text}</Text>\n    </Checkbox>\n  </ListItem>\n);\n","import { createSelector } from 'reselect';\n\nimport { Filters } from './Filter';\n\nconst getTodos = state => Object.values(state.todos);\n\nexport const getVisibleTodos = createSelector(\n  getTodos,\n  (_, filter) => filter,\n  (todos, filter) => {\n    switch (filter) {\n      case Filters.COMPLETED:\n        return todos.filter(todo => todo.completed);\n      case Filters.ACTIVE:\n        return todos.filter(todo => !todo.completed);\n      default:\n        return todos;\n    }\n  },\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defaultMemoize } from 'reselect';\nimport { Container, List } from '@chakra-ui/core';\n\nimport Form from './Form';\nimport Filter, { Filters, Routes } from './Filter';\nimport Item from './Item';\nimport { getVisibleTodos } from './TodoList.selectors';\n\nconst getPathnameFilter = defaultMemoize(pathname => {\n  const route = Object.values(Routes)\n    .find(filterRoute => filterRoute.pathname === pathname);\n  return route ? route.state.filter : Filters.ALL;\n});\n\nexport default () => {\n  const location = useLocation();\n  const activeFilter = location.state\n    ? location.state.filter\n    : getPathnameFilter(location.pathname);\n  const items = useSelector(state => getVisibleTodos(state, activeFilter));\n  return (\n    <Container>\n      <Form />\n      <Filter activeFilter={activeFilter} />\n      <List pt=\"5px\">\n        {items.map(todo => <Item {...todo} key={todo.id} />)}\n      </List>\n    </Container>\n  );\n};\n","import { messages as headerMessages } from './Header';\nimport { messages as todoListMessages } from './TodoList';\n\nexport default {\n  en: {\n    ...headerMessages.en,\n    ...todoListMessages.en,\n  },\n  'zh-TW': {\n    ...headerMessages['zh-TW'],\n    ...todoListMessages['zh-TW'],\n  },\n};\n","import theme from '@chakra-ui/theme';\n\nexport default {\n  ...theme,\n};\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { ChakraProvider, CSSReset } from '@chakra-ui/core';\n\nimport messages from './App.i18n';\nimport theme from './App.theme';\nimport Header from './Header';\nimport TodoList from './TodoList';\n\nconst { language } = navigator;\nconst i18n = messages[language] || messages.en;\n\nexport default () => (\n  <IntlProvider locale={language} messages={i18n}>\n    <ChakraProvider theme={theme}>\n      <CSSReset />\n      <Header />\n      <TodoList />\n    </ChakraProvider>\n  </IntlProvider>\n);\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport App from './App';\n\nexport default () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route path=\"/:filter?\" component={App} />\n  </Router>\n);\n","export default {\n  todos: {},\n};\n","import initialState from './TodoList.state';\nimport { Actions as FormActions } from './Form';\nimport { Actions as ItemActions } from './Item';\n\nexport const todosReducer = (state = initialState.todos, action) => {\n  switch (action.type) {\n    case FormActions.ADD_TODO: {\n      const { id, text } = action.payload;\n      return {\n        ...state,\n        [id]: {\n          id,\n          text,\n          completed: false,\n        },\n      };\n    }\n    case ItemActions.TOGGLE_COMPLETE: {\n      const { id, completed } = action.payload;\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          completed,\n        },\n      };\n    }\n    default: return state;\n  }\n};\n\nexport default {\n  todos: todosReducer,\n};\n","import todoListReducers from './TodoList/TodoList.reducers';\n\nexport default {\n  ...todoListReducers,\n};\n","import { combineReducers } from 'redux';\n\nimport appReducers from './App/App.reducers';\nimport { frameworkReducers } from './Framework';\n\nexport default combineReducers({\n  ...appReducers,\n  ...frameworkReducers,\n});\n","export const frameworkReducers = {};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.'); // eslint-disable-line no-console\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.'); // eslint-disable-line no-console\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error); // eslint-disable-line no-console\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log( // eslint-disable-line no-console\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname\n      .match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' // eslint-disable-line no-console\n            + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\nimport Routes from './routes';\nimport reducer from './reducer';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst composeEnhancers = composeWithDevTools({ trace: true });\nconst store = createStore(\n  reducer,\n  composeEnhancers(),\n);\n\nif (module.hot) {\n  module.hot.accept('./reducer', () => {\n    store.replaceReducer(require('./reducer').default); // eslint-disable-line global-require\n  });\n}\n\nReactDOM.render(\n  <Provider store={store}><Routes /></Provider>,\n  document.getElementById('root'),\n);\nregisterServiceWorker();\n"],"sourceRoot":""}